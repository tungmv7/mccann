<?php/*** Footer Recent_Posts widget class */class wpth_WP_widget_footer_recent_entries extends WP_Widget {    public function __construct() {        $widget_ops = array('classname' => 'widget_footer_recent_entries', 'description' => __( "Your footer&#8217;s most recent Posts.", 'rook') );        parent::__construct('footer-recent-posts', __('ROOK - Recent Posts', 'rook'), $widget_ops);        $this->alt_option_name = 'widget_footer_recent_entries';        add_action( 'save_post', array($this, 'flush_widget_cache') );        add_action( 'deleted_post', array($this, 'flush_widget_cache') );        add_action( 'switch_theme', array($this, 'flush_widget_cache') );    }    public function widget($args, $instance) {        $cache = array();        if ( ! $this->is_preview() ) {            $cache = wp_cache_get( 'widget_footer_recent_entries', 'widget' );        }        if ( ! is_array( $cache ) ) {            $cache = array();        }        if ( ! isset( $args['widget_id'] ) ) {            $args['widget_id'] = $this->id;        }        if ( isset( $cache[ $args['widget_id'] ] ) ) {            echo $cache[ $args['widget_id'] ];            return;        }        ob_start();        $title = ( ! empty( $instance['title'] ) ) ? $instance['title'] : __( 'Footer Recent Posts', 'rook' );        /** This filter is documented in wp-includes/default-widgets.php */        $title = apply_filters( 'widget_title', $title, $instance, $this->id_base );        $number = ( ! empty( $instance['number'] ) ) ? absint( $instance['number'] ) : 5;        if ( ! $number )            $number = 5;        $show_date = isset( $instance['show_date'] ) ? $instance['show_date'] : false;        /**         * Filter the arguments for the Recent Posts widget.         *         * @since 3.4.0         *         * @see WP_Query::get_posts()         *         * @param array $args An array of arguments used to retrieve the recent posts.         */        $r = new WP_Query( apply_filters( 'widget_posts_args', array(            'posts_per_page'      => $number,            'no_found_rows'       => true,            'post_status'         => 'publish',            'ignore_sticky_posts' => true        ) ) );        if ($r->have_posts()) :            ?>            <?php echo $args['before_widget']; ?>            <?php if ( $title ) {            echo $args['before_title'] . $title . $args['after_title'];        } ?>            <div class="footer-second-blogl">                <ul>                    <?php while ( $r->have_posts() ) : $r->the_post(); ?>                        <li>                            <a href="<?php the_permalink(); ?>"><?php get_the_title() ? the_title() : the_ID(); ?></a>                            <?php if ( $show_date ) : ?>                                <br><span class="post-date"><?php echo get_the_date(); ?></span>                            <?php endif; ?>                        </li>                    <?php endwhile; ?>                </ul>            </div>            <?php echo $args['after_widget']; ?>            <?php            // Reset the global $the_post as this query will have stomped on it            wp_reset_postdata();        endif;        if ( ! $this->is_preview() ) {            $cache[ $args['widget_id'] ] = ob_get_flush();            wp_cache_set( 'widget_footer_recent_entries', $cache, 'widget' );        } else {            ob_end_flush();        }    }    public function update( $new_instance, $old_instance ) {        $instance = $old_instance;        $instance['title'] = strip_tags($new_instance['title']);        $instance['number'] = (int) $new_instance['number'];        $instance['show_date'] = isset( $new_instance['show_date'] ) ? (bool) $new_instance['show_date'] : false;        $this->flush_widget_cache();        $alloptions = wp_cache_get( 'alloptions', 'options' );        if ( isset($alloptions['widget_recent_entries']) )            delete_option('widget_recent_entries');        return $instance;    }    public function flush_widget_cache() {        wp_cache_delete('widget_footer_recent_entries', 'widget');    }    public function form( $instance ) {        $title     = isset( $instance['title'] ) ? esc_attr( $instance['title'] ) : '';        $number    = isset( $instance['number'] ) ? absint( $instance['number'] ) : 2;        $show_date = isset( $instance['show_date'] ) ? (bool) $instance['show_date'] : false;        ?>        <p><label for="<?php echo $this->get_field_id( 'title' ); ?>"><?php _e( 'Title:', 'rook' ); ?></label>            <input class="widefat" id="<?php echo $this->get_field_id( 'title' ); ?>" name="<?php echo $this->get_field_name( 'title' ); ?>" type="text" value="<?php echo $title; ?>" /></p>        <p><label for="<?php echo $this->get_field_id( 'number' ); ?>"><?php _e( 'Number of posts to show:', 'rook' ); ?></label>            <input id="<?php echo $this->get_field_id( 'number' ); ?>" name="<?php echo $this->get_field_name( 'number' ); ?>" type="text" value="<?php echo $number; ?>" size="3" /></p>        <p><input class="checkbox" type="checkbox" <?php checked( $show_date ); ?> id="<?php echo $this->get_field_id( 'show_date' ); ?>" name="<?php echo $this->get_field_name( 'show_date' ); ?>" />            <label for="<?php echo $this->get_field_id( 'show_date' ); ?>"><?php _e( 'Display post date?', 'rook' ); ?></label></p>    <?php    }}function wpth_register_custom_widgets() {    register_widget( 'wpth_WP_widget_footer_recent_entries' );}add_action( 'widgets_init', 'wpth_register_custom_widgets',1 );// Footer Instagram widget classdefine('WP_INSTAGRAM_WIDGET_PATH', dirname(__FILE__));define('WP_INSTAGRAM_WIDGET_BASE', plugin_basename(__FILE__));define('WP_INSTAGRAM_WIDGET_FILE', __FILE__);// text domain$rookwidgetdomain = 'rookwidget';// load language filesload_plugin_textdomain($rookwidgetdomain, false, dirname(WP_INSTAGRAM_WIDGET_BASE) . '/assets/languages/');// registeradd_action('widgets_init', 'rookwidget_widget');function rookwidget_widget() {    register_widget('null_instagram_widget');}class null_instagram_widget extends WP_Widget {	function __construct() {		parent::__construct(			'null-instagram-feed',			__( 'ROOK - From Instagram', 'wpiw' ),			array( 'classname' => 'null-instagram-feed', 'description' => __( 'Displays your latest Instagram photos', 'wpiw' ) )		);	}    function widget($args, $instance) {        extract($args, EXTR_SKIP);        $title = empty($instance['title']) ? '' : apply_filters('widget_title', $instance['title']);        $username = empty($instance['username']) ? '' : $instance['username'];        $limit = empty($instance['number']) ? 9 : $instance['number'];        $size = empty($instance['size']) ? 'thumbnail' : $instance['size'];        $target = empty($instance['target']) ? '_self' : $instance['target'];        $link = empty($instance['link']) ? '' : $instance['link'];        echo $before_widget;        if(!empty($title)) { echo $before_title . $title . $after_title; };        do_action( 'rookwidget_before_widget', $instance );        if ($username != '') {            $media_array = $this->scrape_instagram($username, $limit);            if ( is_wp_error($media_array) ) {                echo $media_array->get_error_message();            } else {                // filter for images only?                if ( $images_only = apply_filters( 'rookwidget_images_only', FALSE ) )                    $media_array = array_filter( $media_array, array( $this, 'images_only' ) );								// filters for custom classes				$liclass = esc_attr( apply_filters( 'wpiw_item_class', '' ) );				$aclass = esc_attr( apply_filters( 'wpiw_a_class', '' ) );				$imgclass = esc_attr( apply_filters( 'wpiw_img_class', '' ) );                ?><ul class="instagram-pics"><?php                foreach ($media_array as $item) {                    echo '<li class="'. $liclass .'"><a href="'. esc_url( $item['link'] ) .'" target="'. esc_attr( $target ) .'" class="'. $aclass .'"><img src="'. esc_url( $item['thumbnail'] ) .'"  alt="'. esc_attr( $item['description'] ) .'" title="'. esc_attr( $item['description'] ).'" class="'. $imgclass .'"/></a></li>';                }                ?></ul><?php            }        }        if ($link != '') {            ?><p class="clear"><a href="//instagram.com/<?php echo esc_attr( trim( $username ) ); ?>" rel="me" target="<?php echo esc_attr( $target ); ?>"><?php echo $link; ?></a></p><?php        }        do_action( 'rookwidget_after_widget', $instance );        echo $after_widget;    }	function form( $instance ) {		$instance = wp_parse_args( (array) $instance, array( 'title' => __( 'Instagram', 'wpiw' ), 'username' => '', 'link' => __( 'Follow Us', 'wpiw' ), 'number' => 9, 'target' => '_self' ) );		$title = esc_attr( $instance['title'] );		$username = esc_attr( $instance['username'] );		$number = absint( $instance['number'] );		$target = esc_attr( $instance['target'] );		$link = esc_attr( $instance['link'] );		?>		<p><label for="<?php echo $this->get_field_id( 'title' ); ?>"><?php _e( 'Title', 'wpiw' ); ?>: <input class="widefat" id="<?php echo $this->get_field_id( 'title' ); ?>" name="<?php echo $this->get_field_name( 'title' ); ?>" type="text" value="<?php echo $title; ?>" /></label></p>		<p><label for="<?php echo $this->get_field_id( 'username' ); ?>"><?php _e( 'Username', 'wpiw' ); ?>: <input class="widefat" id="<?php echo $this->get_field_id( 'username' ); ?>" name="<?php echo $this->get_field_name( 'username' ); ?>" type="text" value="<?php echo $username; ?>" /></label></p>		<p><label for="<?php echo $this->get_field_id( 'number' ); ?>"><?php _e( 'Number of photos', 'wpiw' ); ?>: <input class="widefat" id="<?php echo $this->get_field_id( 'number' ); ?>" name="<?php echo $this->get_field_name( 'number' ); ?>" type="text" value="<?php echo $number; ?>" /></label></p>		<p><label for="<?php echo $this->get_field_id( 'target' ); ?>"><?php _e( 'Open links in', 'wpiw' ); ?>:</label>			<select id="<?php echo $this->get_field_id( 'target' ); ?>" name="<?php echo $this->get_field_name( 'target' ); ?>" class="widefat">				<option value="_self" <?php selected( '_self', $target ) ?>><?php _e( 'Current window (_self)', 'wpiw' ); ?></option>				<option value="_blank" <?php selected( '_blank', $target ) ?>><?php _e( 'New window (_blank)', 'wpiw' ); ?></option>			</select>		</p>		<p><label for="<?php echo $this->get_field_id( 'link' ); ?>"><?php _e( 'Link text', 'wpiw' ); ?>: <input class="widefat" id="<?php echo $this->get_field_id( 'link' ); ?>" name="<?php echo $this->get_field_name( 'link' ); ?>" type="text" value="<?php echo $link; ?>" /></label></p>		<?php	}    function update($new_instance, $old_instance) {        $instance = $old_instance;        $instance['title'] = strip_tags($new_instance['title']);        $instance['username'] = trim(strip_tags($new_instance['username']));        $instance['number'] = !absint($new_instance['number']) ? 9 : $new_instance['number'];        $instance['size'] = (($new_instance['size'] == 'thumbnail' || $new_instance['size'] == 'large') ? $new_instance['size'] : 'thumbnail');        $instance['target'] = (($new_instance['target'] == '_self' || $new_instance['target'] == '_blank') ? $new_instance['target'] : '_self');        $instance['link'] = strip_tags($new_instance['link']);        return $instance;    }    // based on https://gist.github.com/cosmocatalano/4544576    function scrape_instagram( $username, $slice = 9 ) {		$username = strtolower( $username );		if ( false === ( $instagram = get_transient( 'instagram-media-new-'.sanitize_title_with_dashes( $username ) ) ) ) {			$remote = wp_remote_get( 'http://instagram.com/'.trim( $username ) );			if ( is_wp_error( $remote ) )				return new WP_Error( 'site_down', __( 'Unable to communicate with Instagram.', 'wpiw' ) );			if ( 200 != wp_remote_retrieve_response_code( $remote ) )				return new WP_Error( 'invalid_response', __( 'Instagram did not return a 200.', 'wpiw' ) );			$shards = explode( 'window._sharedData = ', $remote['body'] );			$insta_json = explode( ';</script>', $shards[1] );			$insta_array = json_decode( $insta_json[0], TRUE );			if ( !$insta_array )				return new WP_Error( 'bad_json', __( 'Instagram has returned invalid data.', 'wpiw' ) );			// old style			if ( isset( $insta_array['entry_data']['UserProfile'][0]['userMedia'] ) ) {				$images = $insta_array['entry_data']['UserProfile'][0]['userMedia'];				$type = 'old';			// new style			} else if ( isset( $insta_array['entry_data']['ProfilePage'][0]['user']['media']['nodes'] ) ) {				$images = $insta_array['entry_data']['ProfilePage'][0]['user']['media']['nodes'];				$type = 'new';			} else {				return new WP_Error( 'bad_josn_2', __( 'Instagram has returned invalid data.', 'wpiw' ) );			}			if ( !is_array( $images ) )				return new WP_Error( 'bad_array', __( 'Instagram has returned invalid data.', 'wpiw' ) );			$instagram = array();			switch ( $type ) {				case 'old':					foreach ( $images as $image ) {						if ( $image['user']['username'] == $username ) {							$image['link']						  = preg_replace( "/^http:/i", "", $image['link'] );							$image['images']['thumbnail']		   = preg_replace( "/^http:/i", "", $image['images']['thumbnail'] );							$image['images']['standard_resolution'] = preg_replace( "/^http:/i", "", $image['images']['standard_resolution'] );							$image['images']['low_resolution']	  = preg_replace( "/^http:/i", "", $image['images']['low_resolution'] );							$instagram[] = array(								'description'   => $image['caption']['text'],								'link'		  	=> $image['link'],								'time'		  	=> $image['created_time'],								'comments'	  	=> $image['comments']['count'],								'likes'		 	=> $image['likes']['count'],								'thumbnail'	 	=> $image['images']['thumbnail'],								'large'		 	=> $image['images']['standard_resolution'],								'small'		 	=> $image['images']['low_resolution'],								'type'		  	=> $image['type']							);						}					}				break;				default:					foreach ( $images as $image ) {						$image['display_src'] = preg_replace( "/^http:/i", "", $image['display_src'] );						if ( $image['is_video']  == true ) {							$type = 'video';						} else {							$type = 'image';						}						$instagram[] = array(							'description'   => __( 'Instagram Image', 'wpiw' ),							'link'		  	=> '//instagram.com/p/' . $image['code'],							'time'		  	=> $image['date'],							'comments'	  	=> $image['comments']['count'],							'likes'		 	=> $image['likes']['count'],							'thumbnail'	 	=> $image['display_src'],							'type'		  	=> $type						);					}				break;			}			// do not set an empty transient - should help catch private or empty accounts			if ( ! empty( $instagram ) ) {				$instagram = base64_encode( serialize( $instagram ) );				set_transient( 'instagram-media-new-'.sanitize_title_with_dashes( $username ), $instagram, apply_filters( 'null_instagram_cache_time', HOUR_IN_SECONDS*2 ) );			}		}		if ( ! empty( $instagram ) ) {			$instagram = unserialize( base64_decode( $instagram ) );			return array_slice( $instagram, 0, $slice );		} else {			return new WP_Error( 'no_images', __( 'Instagram did not return any images.', 'wpiw' ) );		}	}    function images_only($media_item) {        if ($media_item['type'] == 'image')            return true;        return false;    }}// Newsletter widget classclass wpth_WP_widget_newsletter extends WP_Widget {    public function __construct() {        $widget_ops = array('classname' => 'widget_newsletter', 'description' => __( "Your newsletter form.", '') );        parent::__construct('newsletter', __('ROOK - Newsletter', 'rook'), $widget_ops);        $this->alt_option_name = 'widget_newsletter';        add_action( 'save_post', array($this, 'flush_widget_cache') );        add_action( 'deleted_post', array($this, 'flush_widget_cache') );        add_action( 'switch_theme', array($this, 'flush_widget_cache') );    }    public function widget($args, $instance) {        $cache = array();        if ( ! $this->is_preview() ) {            $cache = wp_cache_get( 'widget_newsletter', 'widget' );        }        if ( ! is_array( $cache ) ) {            $cache = array();        }        if ( ! isset( $args['widget_id'] ) ) {            $args['widget_id'] = $this->id;        }        if ( isset( $cache[ $args['widget_id'] ] ) ) {            echo $cache[ $args['widget_id'] ];            return;        }        ob_start();        $title = ( ! empty( $instance['title'] ) ) ? $instance['title'] : __( 'Newsletter form', 'rook' );        /** This filter is documented in wp-includes/default-widgets.php */        $title = apply_filters( 'widget_title', $title, $instance, $this->id_base );        $text = apply_filters( 'widget_text', empty( $instance['text'] ) ? '' : $instance['text'], $instance );            ?>            <?php echo $args['before_widget']; ?>            <?php if ( $title ) {                echo $args['before_title'] . $title . $args['after_title'];            } ?>            <div class="newsletter_textwidget"><?php echo !empty( $instance['filter'] ) ? wpautop( $text ) : $text; ?></div>            <form id="subscribe">                <!-- Email Input -->                <div class="footer-second-input">                    <input type="email" name="email" class="form-control email" id="email" placeholder="<?php esc_html_e( 'Email Address', 'rook' ); ?>">                </div>                <!-- Button -->                <div class="footer-second-button">                    <button type="submit" name="send" class="btn btn-pink btn-lg"><?php esc_html_e( 'Sign Up', 'rook' ); ?></button>                </div>            </form>            <div id="contactresult"></div>            <script>                /* ==============================================                 Subscription                 =============================================== */                var templateDir = "<?php echo get_template_directory_uri() ?>";                function validateEmail(sEmail) {                    var filter = /^([\w-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/;                    if (filter.test(sEmail)) {                        return true;                    }                    else {                        return false;                    }                }                jQuery("#subscribe").submit(function(event) {                    //preventing from normal submition                    event.preventDefault();                    //validating email                    var sEmail = jQuery('#subscribe .email').val();                    if (jQuery.trim(sEmail).length == 0) {                        jQuery('#contactresult').html('<div id="th_bg_subscribe_error"><i class="fa fa-times"></i> Enter valid email address</div>');                        event.preventDefault();//stops script execution                        return false;                    }                    //if valid email send info to php                    if (validateEmail(sEmail)) {                        jQuery.post(templateDir + "/php/subscribes.php", jQuery("#subscribe").serialize(),function(result){                            jQuery('#contactresult').html(result);                        });                    } else {                        jQuery('#contactresult').html('<div id="th_bg_subscribe_error"><i class="fa fa-times"></i> Email address is incorrect.Please try again</div>');                        event.preventDefault();                        return false;                    }                });</script>            <?php echo $args['after_widget']; ?>            <?php            // Reset the global $the_post as this query will have stomped on it            wp_reset_postdata();        if ( ! $this->is_preview() ) {            $cache[ $args['widget_id'] ] = ob_get_flush();            wp_cache_set( 'widget_newsletter', $cache, 'widget' );        } else {            ob_end_flush();        }    }    public function update( $new_instance, $old_instance ) {        $instance = $old_instance;        $instance['title'] = strip_tags($new_instance['title']);        if ( current_user_can('unfiltered_html') )            $instance['text'] =  $new_instance['text'];        else            $instance['text'] = stripslashes( wp_filter_post_kses( addslashes($new_instance['text']) ) ); // wp_filter_post_kses() expects slashed        $this->flush_widget_cache();        $alloptions = wp_cache_get( 'alloptions', 'options' );        if ( isset($alloptions['widget_newsletter']) )            delete_option('widget_newsletter');        return $instance;    }    public function flush_widget_cache() {        wp_cache_delete('widget_newsletter', 'widget');    }    public function form( $instance ) {        $instance = wp_parse_args( (array) $instance, array( 'title' => '', 'text' => '' ) );        $title     = isset( $instance['title'] ) ? esc_attr( $instance['title'] ) : '';        $text = esc_textarea($instance['text']);        ?>        <p><label for="<?php echo $this->get_field_id( 'title' ); ?>"><?php _e( 'Title:', 'rook' ); ?></label>            <input class="widefat" id="<?php echo $this->get_field_id( 'title' ); ?>" name="<?php echo $this->get_field_name( 'title' ); ?>" type="text" value="<?php echo $title; ?>" /></p>        <textarea class="widefat" rows="16" cols="20" id="<?php echo $this->get_field_id('text'); ?>" name="<?php echo $this->get_field_name('text'); ?>"><?php echo $text; ?></textarea>    <?php    }}function wpth_register_custom_widget_newsletter() {    register_widget( 'wpth_WP_widget_newsletter' );}add_action( 'widgets_init', 'wpth_register_custom_widget_newsletter',1 );?>